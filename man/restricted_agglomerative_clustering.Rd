% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brittnu.R
\name{restricted_agglomerative_clustering}
\alias{restricted_agglomerative_clustering}
\title{Restricted Agglomerative Clustering}
\usage{
restricted_agglomerative_clustering(
  x,
  verbose = FALSE,
  clustering_method = "average"
)
}
\arguments{
\item{x}{A list such that each element is a 2D double vector, with the topics
to be reordered representing the rows of each vector}

\item{verbose}{A boolean value indicating whether to provide progress updates}

\item{clustering_method}{A string indicating the criterion that will be used
to merge or divide clusters; permitted values are \code{"average"},
\code{"minimum"}, \code{"maximum"}, \code{"median"}, \code{"centroid"}, and
\code{"wald"}}
}
\value{
A two-element list containing the reordered data set and a matrix
  indicating the relationship between each reordered topic and its original
  position in the data, respectively
}
\description{
This helper function performs agglomerative hierarchical cluster
  analysis in order to minimize the sum of squared differences between
  raters.
}
\details{
This procedure conducts a cluster analysis in order to group topics
  from each rater into clusters indicating optimal matches between those
  topics. This effectively serves to reorder the topics constructed by each
  such that, to the extent possible, each individual topic is matched with
  its best-fitting counterparts constructed by each other rater before
  reliability is assessed.

  This cluster analysis uses an additional constraint: topics from the same
  rater can never be combined into the same cluster. This ensures that at the
  end of the process, the number of clusters will be equal to the number of
  topics constructed by each rater, and each rater will have yielded one
  topic belonging to each cluster. If two clusters would be combined such
  that this rule would be violated, then immediately afterward, all offending
  topics are removed from the newly merged cluster and each one is treated as
  an independent cluster to be later merged into other clusters.

  Additionally, to prevent infinite loops (e.g., the same topic is repeatedly
  added to a larger cluster and removed afterward in accordance with the
  preceding procedure), two additional requirements are imposed in order to
  merge any pair of clusters. First, when considering any potential cluster
  merge operation, if executing the merge would in an identical set of
  clusters as any prior step, that operation is not performed, and the
  procedure skips to the next pair of clusters to be considered for merging.
  Second, when considering any potential cluster merge operation, the
  procedure compares the set of raters from which all topics in each of the
  two clusters were drawn, and if either one is a perfect subset of the other
  (e.g., the topics in cluster 1 came from raters 3 and 6, while the topics
  in cluster 2 were created by raters 1, 2, 3, 4, 6, and 8), then we cannot
  merge the two clusters, as all observations in one cluster would just be
  removed from the resulting cluster afterward. Whenever such a perfect
  subset is observed via this diagnostic, the procedure skips to the next
  pair of clusters to be considered for merging.

  Notably, although infinite loops are avoided, this function still tends to
  get stuck in long-lasting loops. When this happens, either
  \link{rotational_shuffling} or \link{restricted_divisive_clustering} may be
  a better choice.
}
